<div>
  <button
    id="themeToggle"
    class="rounded-full grid place-content-center size-8 transition duration-300 focus-visible:outline-dashed focus-visible:outline-2 focus-visible:outline-accent relative z-10"
  >
    <span class="sr-only">Toggle website theme</span>
    <svg
      class="w-4 h-4 fill-current"
      viewBox="0 0 16 16"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="8" cy="8" r="8"></circle>
    </svg>
  </button>
</div>

<style>
  .sun {
    display: none;
  }
  .moon {
    display: block;
  }

  :global(.dark) .sun {
    display: block;
  }
  :global(.dark) .moon {
    display: none;
  }
</style>

<script>
  function getSystemTheme(): "dark" | "light" {
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  function getCurrentTheme(): "dark" | "light" {
    return document.documentElement.classList.contains("dark")
      ? "dark"
      : "light";
  }

  function setTheme(theme: "dark" | "light") {
    localStorage.setItem("theme", theme);
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }

  function initializeTheme() {
    const savedTheme = localStorage.getItem("theme") as "dark" | "light" | null;
    const theme = savedTheme || getSystemTheme();
    setTheme(theme);
  }

  function toggleTheme(event: MouseEvent) {
    const x = event.clientX;
    const y = event.clientY;
    const endRadius = Math.hypot(
      Math.max(x, window.innerWidth - x),
      Math.max(y, window.innerHeight - y),
    );

    const doc = document as Document & {
      startViewTransition?: (callback: () => void) => {
        ready: Promise<void>;
      };
    };

    const newTheme = getCurrentTheme() === "dark" ? "light" : "dark";

    if (!doc.startViewTransition) {
      setTheme(newTheme);
    } else {
      const transition = doc.startViewTransition(() => {
        setTheme(newTheme);
      });

      transition.ready.then(() => {
        const clipPath = [
          `circle(0px at ${x}px ${y}px)`,
          `circle(${endRadius}px at ${x}px ${y}px)`,
        ];
        document.documentElement.animate(
          {
            clipPath: newTheme === "dark" ? [...clipPath].reverse() : clipPath,
          },
          {
            duration: 400,
            easing: "ease-in",
            pseudoElement:
              newTheme === "dark"
                ? "::view-transition-old(root)"
                : "::view-transition-new(root)",
          },
        );
      });
    }
  }

  // Initialize theme on page load
  document.addEventListener("astro:page-load", () => {
    initializeTheme();
    document
      .getElementById("themeToggle")
      ?.addEventListener("click", toggleTheme);
  });
</script>

<script is:inline>
  function applyTheme() {
    const theme =
      localStorage.getItem("theme") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light");

    if (theme === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }

  // Apply theme immediately and after page transitions
  applyTheme();
  document.addEventListener("astro:after-swap", applyTheme);
</script>
